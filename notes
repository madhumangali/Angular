Angular :-
-----------
Angular is used for building client-side applications using HTML, CSS and a programming language like JavaScript or TypeScript.
Angular is not a programming language in itself like JavaScript. Instead, it is a framework which uses a programming language like JavaScript/TypeScript.
Angular is a JavaScript Framework which allows us to create Single-page Applications.

Single-page Applications :-
--------------------------
In a single-page application only one html page contains and the content will vary.

advantages :-
-------------
SPA makes a web application faster and gives the user a reactive experience.
Using JavaScript to change the content of the webpage dynamically is much faster than having to reach out to the server for every page change 
and for every new piece of data we want to display.
If we do need some data from the server, we can load it in the background without making the webpage unresponsive.

why use Angular? :-
------------------
We can use JavaScript or jQuery to do the same thing which we can do with Angular. But As the application grows:
Vanilla JavaScript or jQuery code becomes hard to maintain and we will need a way to properly structure our application.
A lot of applications built using vanilla JavaScript/jQuery is hard to test.
Angular gives our application a clean and loosely coupled structure that is easy to understand & maintain.
It brings a lot of utility code which can be re-used in lot of applications. Especially, when dealing with user navigation & browser history.
Applications built with Angular are more testable.

Setup :-
--------
Node Installation.
Angular ClI installation.
To terminate live development server, press - Ctrl + —Å
To restart the development server, run command ng serve.

TypeScript :-
--------------
TypeScript is a free and open-source programming language developed by Microsoft. It is a superset of JavaScript.
TypeScript has additional features that do not exist in current version of JavaScript supported by most browser.
TypeScript is strongly typed. But JavaScript is dynamically typed.
It has object oriented features which we do not have in JavaScript like interface, access modifiers, fields, properties, generics etc.
With typescript, we can catch errors at compile time.

Component :-
-----------
Component is a TypeScript class decorated with @Component decorator and it contains methods & properties which we can use in HTML.
A class: It contains the code required for the view template. That means, it contains the UI logic.
A View template: It defines the user interface. It contains the HTML, directives & data binding.
A decorator: It adds meta data to the class, making it a component.

?? Pending :-


ngIf Directive :-
------------------
The ngIf Directive is a structural directive.
The ngIf directive is used to add or remove element from a webpage based on agiven condition.

ngClass Directive :-
-------------------
The ngClass is an attribute directive.
The ngClass directive is used to add a CSS class dynamically to a webpage element.

Custom event Binding :-
----------------------
We can pass data from component class to view template and vice versa using property binding, string interpolation and event binding.
We can also pass data from parent component to child component and vice versa. We use @Input & @Output decorator for that.

Input Decorator :-
---------------------
We can pass data from parent component to child component using @Input decorator.
We also call it custom property binding because here we bind the custom properties of child component class with the property or method of parent component class.

Template reference variable :-
------------------------------
A Template reference variable is a reference to any DOM element, component or a directive in the template.

nullish coalescing operator - (?) :-
-----------------------------------

View Encapsulation :-
--------------------
The View Encapsulation is a concept or behaviour in angular, where component CSS styles are encapsulated into the components view and do not effect the rest of the application.

There are three types of View encapsulation in Angular
1. ViewEncapsulation. None --- (Global level css)
2. ViewEncapsulation. Emulated --- (compoonet wise css styles)
3. ViewEncapsulation. ShadowDOM --- (its create a sepearate Dom which can seperates from another dom files)

ng-content :-
------------
The ng-content is used when we want to insert the content dynamically inside the component that helps to increase component reusability.
Using ng-content we can pass content inside the component selector and when angular parses that content that appears at the place of ng-content.

Angular LifeCycle Hooks :-
--------------------------
The Angular lifecycle hooks are the methods that angular invokes on the directives and components as it creates, changes, and destroys them.

When the angular application-starts, it first creates and renders the root component. Then, it creates and renders its Children's & their children. It forms a tree of components
Once Angular loads the components, it starts the process of rendering the view. To do that, it needs to check the input properties, evaluate the data bindings & expressions,
 render the projected content etc.
Angular lets us know when these events happen using lifecycle hooks. 
For Example:
    ngOnInit when Angular initializes the component for the first time.
    When a component's input property change, Angular invokes ngOnChanges
    If the component is destroyed, Angular invokes ngOnDestroy

Change Detection Cycle :-
-------------------------
Change detection is the mechanism by which angular keeps the template in sync with the component.

ex :-<div>Hello {{name }} </div>

Projected content:-
-----------------
Projected content is that HTML content which replaces the <ng-content> directive in child component.

 eg: child Component                                    eg: Parent Component
--------------------                                   --------------------
  <h2>Child Component</h2>                            <h1>Parent Component</h1>
  <ng-content></ng-content>                             <app-child>
                                                          <p>This content is injected from parent</p>
                                                        </app-child>

Input bound properties:-
------------------------
These are those properties of a component class which is decorated with @Input() decorator.

  Child Component
 ------------------
 @Input() message: string

Constructor of a Component:-
---------------------------
Life Cycle of a component begins, when Angular creates the component class. First method that gets invoked is class Constructor.
Constructor is neither a life cycle hook nor it is specific to Angular. It is a JavaScript feature.
It is a method which gets invoked, when a class is created.
When a constructor is called, at that point, none of the components input properties are updated and available to use. Neither its child components are constructed. Projected contents are also not available.
Once Angular instantiates the class, it kick-start the first change detection cycle of the component.

ngOnChanges :-
--------------
It is executed right at the start, when a new component is created, and it also gets executed whenever one of the bound input property changes.
Angular invokes ngOnChanges life cycle hook whenever any data-bound input property of the component or directive changes.
Input properties are those properties, which we define using the @Input decorator. It is one of the ways by which a parent component communicates with the child component.
Initializing the Input properties is the first task that angular carries during the change detection cycle. And if it detects any change in input property, then it raises the ngOnChanges hook. It does so during every change detection cycle.
This hook is not raised if change detection does not detect any changes.

eg: child component :                        eg: Parent Component :
---------------------                        --------------------
@Input() message: string                      <app-child [message]="message">
                                                  </app-child>
 
ngOnInit :-
-------------
Angular raises the ngOnInit hook, after it creates the component and updates its input properties.
This hook is fired only once and immediately after its creation (during the first change detection).
This is a perfect place where you want to add any initialization logic for your component.
Here you have access to every input property of the component. You can use them in http get requests to get the data from the back-end server or run some initialization logic etc.
But remember that, by the time ngOnlnit get's called, none of the child components or projected content are available at this point. Hence any properties we decorate with @ViewChild, @ViewChildren,@ContentChild &@ContentChildren will not be available to use.

ngDoCheck :-
------------
The Angular invokes the ngDoCheck hook event during every change detection cycle. This hook is invoked even if there is no change in any of the properties.
For example, ngDoCheck will run if you clicked a button on the webpage which does not change anything. But still, it's an event.
Angular invokes ngDoCheck it after the ngOnChanges & ngOnInit hooks.
You can use this hook to Implement a custom change detection,whenever Angular fails to detect the changes made to Input properties.
ngDoCheck is also a great method to use, when you want to execute some code on every change detection cycle.

ngAfterContentInit :-
----------------------
ngAfterContentInit Life cycle hook is called after the Component's projected content has been fully initialized.
Angular also updates the properties decorated with the @ContentChild and @ContentChildren before raising this hook.This hook is also raised, even if there is no content to project.
The content here refers to the external content injected from the parent component via Content Projection.
The Angular Components can include the ng-content element, which acts as a placeholder for the content from the parent.
Parent injects the content between the opening & closing selector element. Angular passes this content to the child component

eg : Child Component                                            eg : parent Component
----------------------                                          ------------------------
<h2>Child Component</h2>                                        <h1>Parent Component</h1>
<ng-content></ng-content>                                       <app-child>
                                                                  <p>This content is injected from parent</p>
                                                                </app-child>

ngAfterContentChecked :-
------------------------
ngAfterContentChecked Life cycle hook is called during every change detection cycle after Angular finishes checking of component's projected content.
Angular also updates the properties decorated with the @ContentChild and @ContentChildren before raising this hook.Angular calls this hook even if there is no projected content in the
component.
This hook is very similar to the ngAfterContentInit hook. Both are called after the external content is initialized, checked & updated.
Only difference is that ngAfterContentChecked is raised after every change detection cycle. While ngAfterContentInit during the first change detection cycle.

ngAfterViewInit :-
------------------
ngAfterViewInit hook is called after the Component's View & all its child views are fully initialized. Angular also updates the properties decorated with the @ViewChild &@ViewChildren properties before raising this hook.
The View here refers to the view template of the current component and all its child components & directives.
This hook is called during the first change detection cycle, where angular initializes the view for the first time
At this point all the lifecycle hook methods & change detection of all child components & directives are processed & & Component is completely ready.
This is a component only hook.

ngAfterViewChecked :-
---------------------
The Angular fires this hook after it checks & updates the component's views and child views. This event is fired after the ngAfterViewInit and after that during every change detection cycle.
This hook is very similar to the ngAfterViewInit hook. Both are called after all the child components & directives are initialized and updated.
Only difference is that ngAfterViewChecked is raised during every change detection cycle. While ngAfterViewInit is raised during the first change detection cycle.
This is a component only hook.

ngOnDestroy :-
--------------
If you destroy a component, for example, when you placed ngIf on a component, and this ngIf then set to false, at that time, ngIf will remove that component from the DOM, at that time, ngOnDestroy is called.
This method is the great place to do some cleanup work, because this is called right before the objects will be destroyed itself by angular.
This is the correct place where you would like to Unsubscribe Observables and detach event handlers to avoid memory leaks.

 @ViewChild :-
----------------
we can access the view using viewchild decorator

Html Element (elements/tags) --> Component class (typescript)

 eg : app.component.html                                        eg:   app. component.ts
-------------------------                                       ---------------------------
 <div>                                                          @Component( ({
       <—Ä #paragraph>T This is a paragraph</p>                    selector: 'app-root',
 </div>                                                            templateUrl: 1./app.component.html',
                                                                    styleUrls:
                                                                  })
                                                                 export class AppComponent{
                                                                         title = 'ContentChild';
                                                                    @ViewChild(*paragraph)) paragraphEl: ElementRef;
                                                                  }

Content Projection :-
---------------------

eg : child. component.html                         eg: parent. component.html
---------------------------                        --------------------------
<h2>Child Component</h2>                          <h1>Parent Component</h1>
<ng-content></ng-content>                         <app-child>
                                                     <p>This is a Paragraph</p>
                                                   </app-child>

@ContentChild :-
----------------
Here we can access the parent Html component in child component class.

eg: parent.component.html                                eg: child.component.ts
--------------------------                               -----------------------
 <h1>Parent Component</h1>                                 @Component ({
 <app-child>                                                   selector: 'app-child',
    <—Ä #paragraph>1 This is a paragraph</p>                     templateUrl: ./child. .component.html',
 </app-child>                                                   styleUrls: "" 
                                                            })
                                                        export class ChildComponent {
                                                               title = 'ContentChild';
                                                            @ContentChild('paragraph') paragraphEl: ElementRef;
                                                          }

Directive :-
----------
Directives are simply an instruction to the DOM

Directives in Angular :-
------------------------
COMPONENTS => Component is a directive with a template.
  eg:-  AppComponent
ATTRIBUTE DIRECTIVE => Attribute directive can be used as an attribute to change the behaviour or appearance of an element, component or other directives.
  eg :- ngStyle & ngClass
STRUCTURAL DIRECTIVE => Structural directive controls the DOM element, using which we can add or remove elements from DOM.
 eg :- ngIf & ngFor

@HostListner :-
----------------
The @HostListner decorator listens to the DOM event on the host element and it reacts to that event by executing an event handler method.

@HostBinding :-
---------------
The @HostBinding decorator binds a host element property to a variable in a directive or a component.

Structural directive :-
-----------------------
A structural directive manipulates the DOM by adding or removing element to or from the DOM on which we use it.

*ngIf -> * is used to indicate that it is an structural directive to angular.
           After that internally angular creates an <ng-template> and the entire view will inser/delete as per condition.
           In this the *ngIf is written normal like others directives as [ngIf]

eg :-                           
-----
<div *ngIf="condition">                 <ng-template [ngIf]="condition">
  <p> Para </p>                             <div>
</div>                                            <p> Para </p>      
                                             </div>
                                        </ng-template>

Custom directive :-
Conditional Directive :-
custom AppStyle Directive :-
Structural Directive:-
Custom Structural Directive :-
ngSwitch :-
------------------

Services in Angular :-
------------------------
A Service is a re-usable TypeScript class that can be used in multiple components across your Angular application.
advantages :
--------------
Services are easier to debug and test.
Services provides re-usability of code.
With services, we can communicate across different components.

Dependency Injection :-
------------------------
Dependency Injection is a technique in which a class receives its dependencies from external sources rather than creating them itself.

Hierarchical Injection :-
-------------------------
If we provide a service (e.g.UserService) on one component, the angular framework will create and inject an instance of that service for that component and all its child component.
If we provide a service (e.g. .UserService) in the appModule, the same instance of that service will be available throughout the app i.e. in all components, all directives and all services.
When we provide a service on AppComponent, that service will be instantiated and injected for AppComponent and all its child component and their child component. All of them will receive the same instance of that service.
The lowest level of service providing is on the component with no child component. If we provide a service there, this component will have its own instance of that service.

@Directive - on directives.
@Component - on components.
@Injectable - on receiving service class.

Observables :-
--------------
We use Observables to perform asynchronous operations and handle asynchronous data.
An Observable is a function that converts ordinary stream of data into an Observable stream of data. You can think of Observable as a wrapper around the Ordinary stream of data.

    Observerable              <-----      observer
  (stream of data)                      (Subcriber) 

RxJS :-
-------
The RxJS (Reactive Extension library for JavaScript) is a JavaScript library, that allows us to work with asynchronous data stream.

JavaScript is a single threaded programming language.

=> The Processing the data in angular is done in 2 processes .
1.promise
2.observables

promise :-                                                                     observarbles :-
--------------                                                                --------------------
it sends the data to the client                                      In this the data sends to the client in streams means whatever the data processed
after completion of entire processing of data from data.             at that moment from the Db to the client.
If the data use/ not use by the client it sends the data.            In this, if the data only uses by the clint at the time only process the data.
promise is a native library to javascript.                           But Observables is a native library to Rxjs. 


Observables explanation :-
-------------------------
it contain subscribe method , and this method has arguments (next,error,complete).
next method to execute some events/function.
error method is used to handle errors. after execution of error method no method will excute.
complete method is used to intimate that the processing is completed. after execution of complete method no method will excute.

Different ways to create a observables :-
------------------------------------------
1. new 
2. create Method
3. of 
4. from

of operator v/s from operator :-
--------------------------------
of -> projects the elements/arrays as it is.
      it accepts n number of elements/arrays.

from -> it iterates the elements one by one in an array.
        it accepts only one element/array.
        it used to convert the promise to observable when required.

Operators :-
------------
Operators in RxJS are functions that takes an observable as input and transform it into a new observable and return it. We use operators to manipulate the observable data stream
eg: map(), filter()

Subjects :-
--------------
Subjects is also same like EventEmitters.

UnSubscribe :-
--------------
Unsubcribe to an observable is important, because its keep on emitting the event/action , when you are not unsubscribe the satck memory gets full and the exception takes place.

Routing :-
----------
Routing allows us to navigate from one part of our application to another part or from one view to another view.

routerLink :-
----------
Router link is used to navigate the link with out reloading the page but by using href it reloads the page.

routerLinkActive :-
--------------------
RouterLinkActive is used to apply csss styling to the routerlink.

routerLinkActiveOptions :-
--------------------------
when child router link is active than parent router link is also in active , at a time two buttons will active .
To avoid that problem this concept was introduced  [routerLinkActiveOptions] = '{exact:true}'.

Absolute Path :-
---------------
[routerLink] ="'/About'"   ->   localhost:4200/home   ---->    localhost:4200/About

Relative Path :-
----------------
[routerLink] ="'About'"   ->   localhost:4200/home   ---->    localhost:4200/home/About

../Home -> one Folder Up to the directory/link

navigate() and navigateByUrl() :-
----------------------------------
The above two methods are  internally used Absolute path only.
this.router.navigate(['Home']);
this.router.navigateByUrl('Home');

incase if you want to use relative path than the following is the syntax.
this.router.navigate(['Home'],{relativeTo:this.activatedRoute});


Using Observables we can write a call a back function and we can update the diplay data.

routeParam :-
--------------
ex: localhost:4200/products/:id=1234

RouteParamter is compulsary we need to pass .

Query parameters :-
--------------------
Query parameters are optional parameters that you pass to a route.
These query parameters are added at the end of the URL separated by '?'.

ex: localhost:4200/products?id=1234&&name=iphone

Fragment :-
----------
A fragment in URL is a link which jumps to a section or a content in HTML page which contains the ID mentioned in the fragment. A fragment comes after # sign.
eg : Localhost:4200/Products#service

Child / Nested Routes :-
-----------------------
Child or Nested routes means routes inside routes like parent component and child component.

Route Guards :-
---------------
Angular Route guards can be used to control whether the user can navigate to or away from the given route based on some condition.

use case of route guards :-
------------------------
 To confirm the navigation operation.
 Asking whether to save data before moving away from view.
 Allow access to certain parts of the application to specific users.
 Validating the Route parameters before navigating to the route.
 Fetching some data before you display the component view.

Types of Route Guards :-
-----------------------
 CanActivate
 CanDeactivate
 Resolve
 CanLoad
 CanActivateChild

How to create a Route Guard :-
--------------------------------
1. create a route guard as a service.
2. implement the respective route guard interface.
3. implement the required route guard method.
4. Provide the guard service from the root AppModule.
5. use that route guard on the route which you want to guard.

CanActivate Route Guard :-
--------------------------
CanActivate Route Guard decides if a route can be activated or not. This Route Guard can be used in cases where the user is not authorized to navigate to the target route.
This Route guard is applicable to single route, it not applicable for child routes.

CanActivateChild Route Guard :-
--------------------------------
CanActivateChild Route Guard is applicable to all the child routes ,but not for the child routes.

CanDeactivate Route Guard :-
------------------------------
CanDeactivate Route Guard decides weather a user can navigate away from a route or not.

Resolve Route Guard :-
------------------------
Reslove Route Guard allows the data before the navigation of route takes place.

Navigation Events :-
---------------------
By Enabling the  enableTracing we can log the events of navigation in the console when we navigate from one page to another page.
There are the many events available for navigation events.
1.NavigationStart
2.RoutesRecognized
3.GuardsCheckStart
4.childActivationStart
5.ActivationStart
6.GuardsCheckEnd .... etc
We can Subcribe to  these events and we can perform call back function in the mean while time of processing data.

Custom Pipes :-
----------------
The Pipes are a great way to transform the appearance of elements in the template.
The Angular comes with some great built-in pipes like Date pipe, Currency pipe, and Number pipe, etc. But if these pipes do not cover your needs, then we can create our own custom pipe in Angular.
To create a custom pipe, first we need to create a pipe class. 
The pipe class must implement the PipeTransform interface. We also decorate it with @pipe decorator. Give a name to the pipe under name metadata of the @pipe decorator. Finally, we create the transform method, which transforms given value to the desired output.
Angular team recommends not to use pipes to filter and sort data. This is because a filtering and sorting pipe can significantly impact the performance of the application if not implemented carefully. To better understand the performance implications, let's implement a custom pipe to filter data.

Pure Pipe :-
------------
Pure pipes are those pipes which gets executes when Angular detects a pure change on the input value.

Whenever we create a new pipe in Angular that pipe is a pure pipe. We can also set the pipe as pure or impure explicitely by setting pure property of pipe decorator to true or false respectively.

Angular executes a pure pipe only when it detects a pure change to the input value. A pure change is either 
- a change to a primitive input value (String, Number, Boolean) or
- a changed object reference (Array, Date, Object)
A pure pipe is not executed if the input to the pipe is a reference type like object and only the property values of the object has change but not the reference.

So pure pipes are fast, but using them for filtering data is not a good idea because, the filtering may not work as expected if the source data is updated without a change to the object reference.

Impure Pipes :-
-----------------
The impure pipes are those pipes which are executed for every change detection cycle even if there is no change in the source data. Due to this impure pipes are very costly performance wise and should avoid using impure pipes.

Implementing the data filter logic in an Angular component, so that, we have better control on when that code should and shouldn't execute.

Async Pipe :-
--------------
 We use async pipe to handle asynchronous data in Angular.

Angular Pipes takes a data as input and formats or transform the data tbefore displaying it in the view. We use them to change the appearance of the data before presenting it to the user. The most common use case of pipes is displaying the dates in the correct format as per the user‚Äôs locale.

The syntax of the pipe is as follows: 

Expression | pipeOperator[:pipeArguments]

- Expression: is the expression, which you want to transform
- | : is the Pipe Character
- pipeOperator : name of the Pipe
- pipeArguments: arguments to the Pipe

Forms in Angular :-
---------------------

Template-Driven Form                              Reactive Form
---------------------                        ---------------------
 Simple Basic Form                          Complex form with more control
 Easy to start with                         Structure of form is defined in TypeScript class                               
 Based on template (HTML)

ngModelGroup :-
--------------
To group form controls we use ngModelGroup directive on the container element of form control and specify a name for that. Behind the scenes, a FormGroup object is created for that container and in that object the form controls are created as its properties.

The advantage of using a form group is that, we can do form validation for the control group together instead of doing validation on indivisual form elements.

SetValue() and PatchValue() Methods :-
-----------------------------------
When we use setValue to set values for form control, we need to pass the exact structure of form object and form group to setValue method. If the structure does not match, angular will throw an error. So, we can use setValue method, when we want to set value for all the form controls in a form.

On the other hand, we can use patchValue when we want to set value for some of the form controls. Here, we do not need to pass the exact structure of form object. Instead, we can pass the structure of form control whose value we want to set.

reset() method :-
------------------
The NgForm object has a value property which contains all the form control as its property and the value entered for those form controls as the value for thos properties.

So, to read the value entered in the form controls of a template driven form, we need to access the value property on NgForm and on that we can access the required property values.

We can also reset the form controls to their initial value and state using reset() method of NgForm

Reactive Form :-
-----------------
Unlike template-driven form, we define the structure of a reactive form in typescript class. 
Even the validation of a reactive form is done in typescript class.
 We still need to create the form using HTML but we can connect the HTML form with the reactive form defined in typescript class using formGroup directive.
Also, we define the form controls for a reactive form in the typescript class using FormControl class. and we can also set some default value for each form control by passing a default value to the FormControl() constructor.

Form Array :-
-------------
The FormArray is a way to manage the collection of Form Controls in Angular. The controls can be a FormGroup, FormControl, or another FormArray.

We can group Form Controls in Angular forms in two ways:
 1. Using FormGroup and
 2. Using FormArray.
The difference is how they implement it. In FormGroup controls becomes a property of the FormGroup. Each control is represented as key-value pair.
While in FormArray, the controls become part of an array.

Custom Async Validators :-
-------------------------
Creating an async validator is very similar to creating a sync validator. The only difference is that, async validator either returns a promise or an observable.

Also remember that, angular does not provide any built in async validator. But it allows us to create an async validator.

We use the async validator when we need to send an HTTP call to the server to check if the data is valid.

Creating a Async Validator is simple as creating a function, which must obey the following rules
- The function must return either an observableor a promise
- Return null for valid, or an ValidationErrorCode if the input is invalid

Value Changes Event :-
----------------------
The ValueChanges event is raised by the Angular Forms whenever the value of the FormControl, FormGroup or FormArray changes.

StatusChanges event :-
---------------------
The StatusChanges event is raised by the Angular Forms whenever the angular calculates the validation status of a FormControl, FormGroup or FormArray.

Http Requests :-
----------------
URL                 yourdomain.com/products/id
HTTP VERBS          GET, POST, PUT, PATCH, DELETE
HEADERS             Metadata for the request
BODY                Data to send to the server






































































































